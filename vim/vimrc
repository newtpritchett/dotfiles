" Don't try to be vi compatible
scriptencoding utf-8
filetype off
set nocompatible   " Disable vi-compatibility
set noshowmode
" set laststatus=2   " Always show the statusline

set encoding=utf-8 " Necessary to show Unicode glyphs

let g:ctrlp_custom_ignore = 'vendor\|build\|node_modules\|DS_Store\|git\/'
let g:ctrlp_max_depth=40
let g:ctrlp_working_path_mode=''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0


" Highlight
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:ycm_global_ycm_extra_conf = '~/dotfiles/vim/.ycm_extra_conf.py'
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
Plugin 'VundleVim/Vundle.vim'
" Plugin 'snoe/nvim-parinfer.js'
Plugin 'tpope/vim-fugitive'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'leafgarland/typescript-vim'
Plugin 'junegunn/limelight.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'junegunn/rainbow_parentheses.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'scrooloose/nerdtree'
" Plugin 'valloric/youcompleteme'
Bundle 'dag/vim-fish'

call vundle#end()            " required

filetype plugin indent on    " required


" set colorcolumn=100

autocmd filetype crontab setlocal nobackup nowritebackup
au BufRead,BufNewFile *.md setlocal textwidth=80

syntax on


if (has("termguicolors"))
  set termguicolors
endif
set background=dark


colorscheme gruvbox
hi Normal guibg=NONE ctermbg=NONE



au BufRead,BufNewFile *.g set filetype=geode
au BufRead,BufNewFile *.w set filetype=lisp

map <C-\> <C-v>F\
map <space> <ESC>viw

nnoremap Q q
nnoremap q <Nop>

" Insert a lambda: mostly for scheme and haskell
imap <C-Bslash> Î»

" This keeps the current visual block selection active
" after changing indent with '<' or '>'. Usually the
" visual block selection is lost after you shift it,
" which is incredibly annoying.
vmap > >gv
vmap < <gv


filetype plugin indent on


" Change the scroll wheel from an actual scroll
" to just moving up and down with arrowkeys
map <ScrollWheelUp> <Up>
map <ScrollWheelDown> <Down>
map <ScrollWheelRight> <Right>
map <ScrollWheelLeft> <Left>
" Enables numbers on
map <C-c> :set relativenumber! <bar> set nu!<CR>
" Setup a toggle for nerd tree on ctr+n
map <C-n> :NERDTreeToggle<CR>
" Map ctrl+q and ctrl+Q to quit and SUPER quit :)
map <C-q> :q<CR>
map <C-Q> :q!<CR>
" Map esc to exit terminal mode
" Map ctrl + s to save in any mode
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" Cursor motion
runtime! macros/matchit.vim




inoremap {<CR> {<CR>}<C-o>O



set smartindent
set noswapfile
let g:indentLine_fileTypeExclude=['help']
let g:indentLine_bufNameExclude=['NERD_tree.*']
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
au VimEnter * RainbowParentheses
let g:go_fmt_command = 'goimports'

let g:indentLine_enabled = 1
set shortmess+=I
set visualbell t_vb= " disable visual bell
set ttyfast  " we have a fast terminal
set lazyredraw
set backspace=indent,eol,start
""" System Clipboard and COPY and PASTE support
set clipboard=unnamed
" Enable mouse mode in every mode
set mouse=a
set cursorline
" System copy and paste
set pastetoggle=<F2>
set scrolloff=8
set matchpairs+=<:> " use % to jump between pairs
" Searching
set incsearch
set ignorecase
set smartcase
set showmatch
map <leader><space> :let @/=''<cr> " clear search
" Use tab to navitate blocks
" nnoremap <tab> %

" Split pane navigation mappings
set winheight=999
set winminheight=0
noremap <C-A-left> <C-W>h<C-W>_
noremap <C-A-right> <C-W>l<C-W>_

set splitbelow
set splitright

set tabstop=2
set shiftwidth=2

set nofoldenable     "don't fold by default
set foldmethod=indent   " fold on indentations
set foldnestmax=10   "only fold up to 10 levels
set foldlevel=1     " only show me first fold level


" Make haskell use spaces for tabs instead of tabs
autocmd Filetype haskell setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype Lisp setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2


nnoremap tn :tabnew<Space>
nnoremap tl :tabnext<CR>
nnoremap th :tabprev<CR>
nnoremap tj :tabfirst<CR>
nnoremap tk :tablast<CR>
nnoremap tq :tabclose<CR>
command WQ wq
command Wq wq
command W w
command Q q
nnoremap ; :

"set up code folding


set number
